.deploy_job_template:
  stage: deploy
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - deploy

.clang_tidy_deploy_template:
  extends: .deploy_job_template
  tags:
    - deploy
    - shiny
  script:
    - add_doc_server_ssh_keys $DOCS_DEPLOY_KEY $DOCS_SERVER $DOCS_SERVER_USER
    - export GIT_VER=$(git describe --always)
    - cd $IDF_PATH/examples/get-started/hello_world/tidybuild
    - mv report $GIT_VER
    - tar czvf $GIT_VER.tar.gz $GIT_VER
    - export STATIC_REPORT_PATH="web/static_analysis/esp-idf/"
    - ssh $DOCS_SERVER -x "mkdir -p $STATIC_REPORT_PATH/clang-tidy"
    - scp $GIT_VER.tar.gz $DOCS_SERVER:$STATIC_REPORT_PATH/clang-tidy
    - ssh $DOCS_SERVER -x "cd $STATIC_REPORT_PATH/clang-tidy && tar xzvf $GIT_VER.tar.gz && rm -f latest && ln -s $GIT_VER latest"
    # add link to view the report
    - echo "[static analysis][clang tidy] $CI_DOCKER_REGISTRY/static_analysis/esp-idf/clang-tidy/${GIT_VER}/index.html"
    - test ! -e ${GIT_VER}/FAILED_RULES || { echo 'Failed static analysis rules!'; cat ${GIT_VER}/FAILED_RULES; exit 1; }

clang_tidy_deploy:
  extends: .clang_tidy_deploy_template
  # Override default stage to happen before the post_check
  stage: test_deploy
  needs:
    - clang_tidy_check
    - clang_tidy_check_all
  variables:
    BOT_NEEDS_TRIGGER_BY_NAME: 1

clang_tidy_deploy_regular:
  extends:
    - .clang_tidy_deploy_template
    - .rules:labels:static_analysis-only
  needs:
    - clang_tidy_check_regular

push_to_github:
  extends:
    - .deploy_job_template
    - .before_script_lesser
    - .rules:push_to_github
  dependencies: []
  script:
    - add_github_ssh_keys
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/esp-idf.git
    - tools/ci/push_to_github.sh

.deploy_docs_template:
  extends:
    - .deploy_job_template
    - .before_script_lesser
  image: $ESP_IDF_DOC_ENV_IMAGE
  tags:
    - deploy
    - shiny
  variables:
    DOCS_BUILD_DIR: "${IDF_PATH}/docs/_build/"
    PYTHONUNBUFFERED: 1
  script:
    - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER
    - export GIT_VER=$(git describe --always)
    - ${IDF_PATH}/tools/ci/multirun_with_pyenv.sh -p 3.6.10 ${IDF_PATH}/tools/ci/deploy_docs.py

# deploys docs to CI_DOCKER_REGISTRY webserver, for internal review
deploy_docs_preview:
  extends:
    - .deploy_docs_template
    - .rules:labels:build_docs-preview
  # Override default stage to happen before the post_check
  stage: test_deploy
  needs:
    - build_docs_html
    - build_docs_pdf
  variables:
    TYPE: "preview"
    # older branches use DOCS_DEPLOY_KEY, DOCS_SERVER, DOCS_SERVER_USER, DOCS_PATH for preview server so we keep these names for 'preview'
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_DEPLOY_KEY"
    DOCS_DEPLOY_SERVER: "$DOCS_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_SERVER_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PATH"
    DOCS_DEPLOY_URL_BASE: "https://$DOCS_PREVIEW_SERVER_URL/docs/esp-idf"

# deploy docs to production webserver
deploy_docs_production:
  # The DOCS_PROD_* variables used by this job are "Protected" so these branches must all be marked "Protected" in Gitlab settings
  extends:
    - .deploy_docs_template
    - .rules:push_to_github
  stage: post_deploy
  needs: # ensure runs after push_to_github succeeded
    - build_docs_html
    - build_docs_pdf
    - push_to_github
  variables:
    TYPE: "preview"
    DOCS_DEPLOY_PRIVATEKEY: "$DOCS_PROD_DEPLOY_KEY"
    DOCS_DEPLOY_SERVER: "$DOCS_PROD_SERVER"
    DOCS_DEPLOY_SERVER_USER: "$DOCS_PROD_SERVER_USER"
    DOCS_DEPLOY_PATH: "$DOCS_PROD_PATH"
    DOCS_DEPLOY_URL_BASE: "https://docs.espressif.com/projects/esp-idf"
